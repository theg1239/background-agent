"use client";

import { type FormEvent, useMemo, useState, useTransition } from "react";
import { clsx } from "clsx";
import { createPullRequestAction } from "../app/actions/task-actions";

interface DiffArtifactCardProps {
  diff: string;
  taskId: string;
  eventId: string;
  taskTitle?: string;
  repoUrl?: string;
}

type StatusMessage =
  | { type: "success"; message: string; url?: string }
  | { type: "error"; message: string }
  | null;

export function DiffArtifactCard({ diff, taskId, eventId, taskTitle, repoUrl }: DiffArtifactCardProps) {
  const [showPrForm, setShowPrForm] = useState(false);
  const [status, setStatus] = useState<StatusMessage>(null);
  const [copyState, setCopyState] = useState<"patch" | "apply" | null>(null);
  const [isPending, startTransition] = useTransition();

  const defaultBranchName = useMemo(() => {
    const base = (taskTitle ?? "agent-update")
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/^-+|-+$/g, "")
      .slice(0, 40);
    const suffix = Date.now().toString(36).slice(-5);
    return `${base || "agent-update"}-${suffix}`;
  }, [taskTitle]);

  const [baseBranch, setBaseBranch] = useState("main");
  const [branchName, setBranchName] = useState(defaultBranchName);
  const [prTitle, setPrTitle] = useState(() => taskTitle ?? "Background agent update");
  const [prBody, setPrBody] = useState(() => {
    const lines = [
      "This pull request was generated by the background agent.",
      `Task ID: ${taskId}`
    ];
    if (repoUrl) {
      lines.push(`Repository: ${repoUrl}`);
    }
    return lines.join("\n");
  });

  const gitApplySnippet = useMemo(() => {
    const marker = "AGENT_PATCH";
    const trimmedDiff = diff.endsWith("\n") ? diff : `${diff}\n`;
    return `git apply <<'${marker}'\n${trimmedDiff}${marker}`;
  }, [diff]);

  const handleCopy = (variant: "patch" | "apply") => async () => {
    try {
      const text = variant === "patch" ? diff : gitApplySnippet;
      await navigator.clipboard.writeText(text);
      setCopyState(variant);
      setStatus({ type: "success", message: variant === "patch" ? "Patch copied." : "git apply snippet copied." });
      setTimeout(() => {
        setCopyState(null);
        setStatus(null);
      }, 2500);
    } catch (error) {
      setStatus({ type: "error", message: "Clipboard access was denied." });
    }
  };

  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    startTransition(async () => {
      setStatus(null);
      const result = await createPullRequestAction({
        taskId,
        eventId,
        baseBranch,
        branchName,
        title: prTitle,
        body: prBody
      });

      if (result.ok) {
        setStatus({
          type: "success",
          message: "Pull request created successfully.",
          url: result.pullRequestUrl
        });
        setShowPrForm(false);
      } else {
        setStatus({ type: "error", message: result.error ?? "Unable to create pull request." });
      }
    });
  };

  return (
    <div className="mt-4 space-y-4">
      <div className="rounded-2xl border border-neutral-800 bg-neutral-950/80 p-4">
        <div className="flex flex-wrap items-center gap-2">
          <button
            type="button"
            onClick={handleCopy("patch")}
            className={clsx(
              "rounded-full border border-neutral-700 px-3 py-1 text-xs font-semibold text-neutral-200 transition",
              copyState === "patch" ? "border-white text-white" : "hover:border-neutral-500 hover:text-white"
            )}
          >
            Copy patch
          </button>
          <button
            type="button"
            onClick={handleCopy("apply")}
            className={clsx(
              "rounded-full border border-neutral-700 px-3 py-1 text-xs font-semibold text-neutral-200 transition",
              copyState === "apply" ? "border-white text-white" : "hover:border-neutral-500 hover:text-white"
            )}
          >
            Copy git apply
          </button>
          <button
            type="button"
            onClick={() => setShowPrForm((value) => !value)}
            className="rounded-full bg-white px-3 py-1 text-xs font-semibold text-black transition hover:bg-neutral-200"
          >
            {showPrForm ? "Cancel PR" : "Create GitHub PR"}
          </button>
        </div>

        {status ? (
          <div
            className={clsx(
              "mt-3 text-xs",
              status.type === "success" ? "text-emerald-400" : "text-red-400"
            )}
          >
            <span>{status.message}</span>
            {status.type === "success" && status.url ? (
              <a
                href={status.url}
                target="_blank"
                rel="noreferrer"
                className="ml-2 underline"
              >
                View PR
              </a>
            ) : null}
          </div>
        ) : null}

        {showPrForm ? (
          <form onSubmit={handleSubmit} className="mt-4 space-y-3">
            <div>
              <label className="text-xs font-semibold uppercase tracking-[0.2em] text-neutral-500" htmlFor={`${eventId}-base`}>
                Base branch
              </label>
              <input
                id={`${eventId}-base`}
                type="text"
                value={baseBranch}
                onChange={(event) => setBaseBranch(event.target.value)}
                className="mt-1 w-full rounded-xl border border-neutral-800 bg-neutral-950 px-3 py-2 text-sm text-neutral-100 focus:border-neutral-600 focus:outline-none"
                placeholder="main"
                required
              />
            </div>
            <div>
              <label className="text-xs font-semibold uppercase tracking-[0.2em] text-neutral-500" htmlFor={`${eventId}-branch`}>
                New branch name
              </label>
              <input
                id={`${eventId}-branch`}
                type="text"
                value={branchName}
                onChange={(event) => setBranchName(event.target.value)}
                className="mt-1 w-full rounded-xl border border-neutral-800 bg-neutral-950 px-3 py-2 text-sm text-neutral-100 focus:border-neutral-600 focus:outline-none"
                required
              />
            </div>
            <div>
              <label className="text-xs font-semibold uppercase tracking-[0.2em] text-neutral-500" htmlFor={`${eventId}-title`}>
                Pull request title
              </label>
              <input
                id={`${eventId}-title`}
                type="text"
                value={prTitle}
                onChange={(event) => setPrTitle(event.target.value)}
                className="mt-1 w-full rounded-xl border border-neutral-800 bg-neutral-950 px-3 py-2 text-sm text-neutral-100 focus:border-neutral-600 focus:outline-none"
                required
              />
            </div>
            <div>
              <label className="text-xs font-semibold uppercase tracking-[0.2em] text-neutral-500" htmlFor={`${eventId}-body`}>
                Pull request body (optional)
              </label>
              <textarea
                id={`${eventId}-body`}
                rows={4}
                value={prBody}
                onChange={(event) => setPrBody(event.target.value)}
                className="mt-1 w-full rounded-xl border border-neutral-800 bg-neutral-950 px-3 py-2 text-sm text-neutral-100 focus:border-neutral-600 focus:outline-none"
              />
            </div>
            <button
              type="submit"
              disabled={isPending}
              className="rounded-full bg-white px-4 py-2 text-sm font-semibold text-black transition hover:bg-neutral-200 disabled:cursor-not-allowed disabled:bg-neutral-800 disabled:text-neutral-400"
            >
              {isPending ? "Creating..." : "Create pull request"}
            </button>
          </form>
        ) : null}

        <div className="mt-4 max-h-80 overflow-auto rounded-2xl bg-neutral-950/70 p-4 text-xs font-mono leading-5 text-neutral-200">
          {diff.split("\n").map((line, index) => (
            <div
              key={index}
              className={clsx(
                "whitespace-pre",
                line.startsWith("+++") || line.startsWith("---")
                  ? "text-neutral-400"
                  : line.startsWith("@@")
                  ? "text-sky-400"
                  : line.startsWith("+")
                  ? "text-emerald-400"
                  : line.startsWith("-")
                  ? "text-red-400"
                  : "text-neutral-200"
              )}
            >
              {line || " "}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
